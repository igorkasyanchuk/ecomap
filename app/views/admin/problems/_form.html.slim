ul.nav.nav-tabs role="tablist"
  li.active role="presentation" 
    a href="#general_tab" aria-controls="general_tab" role="tab" data-toggle="tab" General
  li role="presentation" 
    a href="#photos_tab" aria-controls="photos_tab" role="tab" data-toggle="tab" Photos
  li role="presentation" 
    a href="#coords_tab" aria-controls="coords_tab" role="tab" data-toggle="tab" Coordinates
    
= simple_form_for [:admin, @problem], method: method, html: {multipart: true, class: 'dropzone-form'} do |form|
  .tab-content
    #general_tab.tab-pane.active role="tabpanel"
      .form.form-group
        br
        = form.association  :problem_category, label_method: :name, value_method: :id, include_blank: 'Problem category', class: 'form-control'
        = form.input :title, class: 'form-control'
        = form.input :description, class: 'form-control'
        = form.input :solution, class: 'form-control'
        = form.input :moderated, class: 'form-control'
        = form.input :solved, class: 'form-control'
        = form.input :likes, class: 'form-control'
        = form.association :author, label_method: :full_name, value_method: :id, class: 'form-control'
        = form.input :stars, class: 'form-control'

    #photos_tab.tab-pane.photos-tab role="tabpanel"
      #photos
        = form.simple_fields_for :photos do |photo|
          = render 'photo_fields', f: photo

      .row
        .col-lg-12.links
          = link_to_add_association form, :photos, class: 'btn btn-info' do
            =<> fa_icon 'plus'
            | Add photo

    #coords_tab.tab-pane.photos-tab role="tabpanel"
      .row
        .col-lg-12
          = form.input :lat, class: 'form-control'
      .row
        .col-lg-12
          = form.input :lng, class: 'form-control'
      hr/
      .row
        .col-lg-12
          #map

  hr/
  .btn-group
    = form.button :button, class: 'btn-default' do
      = fa_icon 'save', text: t('crud.save')
    = link_to :back, class: 'btn btn-default' do
      = fa_icon 'close', text: t('crud.cancel')


javascript:
  function show_preview(input) {
    if (input.files && input.files[0]){
      reader = new FileReader();

      reader.onload = function(e) {
        $(input).parents('.photo-controll-group').find('img.uploaded-image-preview').attr('src', e.target.result);

        console.log($(input).parents('.photo-controll-group').find('img.uploaded-image-preview'));
      }

      reader.readAsDataURL(input.files[0]);
    }
  }

  $(function(){
    $('body').on('change', '.upload-image-controll', function()  {
      show_preview(this);
    });
  });

- content_for :scripts do
  javascript:
    function initMap() {
      var mapCenter  = {lat: 48.909367, lng: 24.710889};
      var mapCanvas  = document.getElementById('map');
      var mapOptions = {
        zoom: 12,
        center: mapCenter
      };

      var marker;
      var map = new google.maps.Map(mapCanvas, mapOptions);

      google.maps.event.addListener(map, 'click', function(event) {
        marker = update_marker(map, marker, event.latLng);
        update_form_fields(marker);
      });

      resize_map();
    }

    function update_marker(map, marker, location) {
      if (marker) {
        marker.setPosition(location);
      } else {
        marker = new google.maps.Marker({
          position: location,
          map: map
        });
      }

      return marker;
    }

    function update_form_fields(marker) {
      var lat = marker.getPosition().lat();
      var lng = marker.getPosition().lng();
      
      $('#problem_lat').val(lat);
      $('#problem_lng').val(lng);
    }

    function resize_map() {
      var element = document.getElementById('map');

      element.style.height = window.innerHeight - 90 + 'px';
      element.style.width  = element.parentElement.offsetWidth - 30 + 'px';
    }

    window.onresize = function(e) {
      resize_map();
    }

  script async="" src="https://maps.googleapis.com/maps/api/js?key=#{Rails.application.secrets[:google_api_key]}&callback=initMap"